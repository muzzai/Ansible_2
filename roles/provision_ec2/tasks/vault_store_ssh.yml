---
- name: Store SSH secret in Vault
  when: provision_vault_enabled | bool
  block:
    - name: Build Vault payload for SSH secret
      ansible.builtin.set_fact:
        provision_vault_payload:
          instance_id: "{{ ec2_instance_info.instance_id }}"
          instance_type: "{{ ec2_instance_info.instance_type }}"
          image_id: "{{ ec2_instance_info.image_id }}"
          region: "{{ ec2_instance_info.placement.region }}"
          private_ip: "{{ ec2_instance_info.private_ip_address }}"
          public_ip: "{{ ec2_instance_info.public_ip_address | default('') }}"
          key_name: "{{ ec2_instance_info.key_name }}"
          security_group_id: "{{ ec2_security_group_info.group_id }}"
          security_group_name: "{{ ec2_security_group_info.group_name }}"
          vpc_id: "{{ ec2_security_group_info.vpc_id }}"
          private_key: "{{ ec2_key_pair.key.private_key }}"

    - name: Store SSH secret
      community.hashi_vault.vault_kv2_write:
        url: "{{ provision_vault_connection.url | regex_replace('/+$', '') }}"
        auth_method: approle
        auth_mount_point: "{{ provision_vault_connection.auth_mount_point }}"
        role_id: "{{ provision_vault_connection.role_id }}"
        secret_id: "{{ provision_vault_connection.secret_id }}"
        path: "{{ provision_vault_connection.ssh_path }}"
        engine_mount_point: "{{ provision_vault_connection.kv_mount }}"
        data: "{{ provision_vault_payload }}"
        ca_cert: "{{ provision_vault_connection.ca_cert_path | default(omit) }}"
        validate_certs: "{{ provision_vault_connection.validate_certs | bool }}"
      register: vault_write_result
      delegate_to: "{{ provision_control_host }}"
      run_once: true

    - name: Verify stored SSH secret
      community.hashi_vault.vault_kv2_get:
        url: "{{ provision_vault_connection.url | regex_replace('/+$', '') }}"
        auth_method: approle
        auth_mount_point: "{{ provision_vault_connection.auth_mount_point }}"
        role_id: "{{ provision_vault_connection.role_id }}"
        secret_id: "{{ provision_vault_connection.secret_id }}"
        path: "{{ provision_vault_connection.ssh_path }}"
        engine_mount_point: "{{ provision_vault_connection.kv_mount }}"
        ca_cert: "{{ provision_vault_connection.ca_cert_path | default(omit) }}"
        validate_certs: "{{ provision_vault_connection.validate_certs | bool }}"
      register: vault_verify_result
      delegate_to: "{{ provision_control_host }}"
      run_once: true
      failed_when: false

    - name: Record Vault storage status
      ansible.builtin.set_fact:
        vault_ssh_stored: >-
          {{ (vault_write_result is defined and vault_write_result is succeeded)
             and (vault_verify_result is defined and vault_verify_result is succeeded)
             and (vault_verify_result.data.data.instance_id | default('')) == ec2_instance_info.instance_id }}
        vault_ssh_path_full: "{{ provision_vault_connection.kv_mount }}/data/{{ provision_vault_connection.ssh_path }}"

- name: Set default Vault status when integration disabled
  ansible.builtin.set_fact:
    vault_ssh_stored: false
    vault_ssh_path_full: "n/a"
  when: not provision_vault_enabled | bool

- name: Handle Vault integration result messaging
  ansible.builtin.debug:
    msg:
      - "Vault integration: {{ provision_vault_enabled | ternary('ENABLED', 'DISABLED') }}"
      - "Vault path: {{ vault_ssh_path_full | default('n/a') }}"
      - "SSH key stored: {{ (vault_ssh_stored | default(false)) | ternary('YES', 'NO') }}"
