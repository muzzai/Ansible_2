---
- name: Validate required parameters
  ansible.builtin.assert:
    that:
      - manage_secret_action in ['write', 'get']
      - manage_secret_action == 'write' and manage_secret_payload is defined
      - manage_secret_action == 'write' and manage_secret_payload | length > 0

    fail_msg: |
      {% if manage_secret_action not in ['write', 'get'] %}
      Action must be get or write
      {% elif manage_secret_action == 'write' and manage_secret_payload is not defined %}
      manage_secret_payload must be defined when action is write
      {% elif manage_secret_action == 'write' and manage_secret_payload | length == 0 %}
      manage_secret_payload dictionary must not be empty when action is write
      {% endif %}

- name: Create a temporary file for the CA certificate
  ansible.builtin.tempfile:
    state: file
    suffix: .crt
  register: manage_secret_temp_ca_cert
  run_once: true

- name: Write the CA certificate to the temporary file
  ansible.builtin.copy:
    content: "{{ manage_secret_vault_ca_cert_env_var }}"
    dest: "{{ manage_secret_temp_ca_cert.path }}"
    mode: "600"
  run_once: true

- name: Store SSH secret
  community.hashi_vault.vault_kv2_write:
    url: "{{ manage_secret_vault_addr }}"
    auth_method: approle
    role_id: "{{ manage_secret_vault_role_id }}"
    secret_id: "{{ manage_secret_vault_secret_id }}"
    path: "{{ manage_secret_path }}"
    engine_mount_point: "{{ manage_secret_vault_kv_mount }}"
    data: "{{ manage_secret_payload }}"
    ca_cert: "{{ manage_secret_temp_ca_cert.path }}"
    validate_certs: true
  when: manage_secret_action == 'write'
  register: manage_secret_vault_write_result
  run_once: true

- name: Fetch SSH private key from Vault
  community.hashi_vault.vault_kv2_get:
    url: "{{ manage_secret_vault_addr }}"
    auth_method: approle
    role_id: "{{ manage_secret_vault_role_id }}"
    secret_id: "{{ manage_secret_vault_secret_id }}"
    path: "{{ manage_secret_path }}"
    engine_mount_point: "{{ manage_secret_vault_kv_mount }}"
    ca_cert: "{{ manage_secret_vault_ca_cert_path }}"
    validate_certs: true
  when: manage_secret_action == 'get'
  register: manage_secret_data
